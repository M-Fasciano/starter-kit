/*------------------------------------
    #MIXINS
-------------------------------------*/

//  Responsive media query mixins.
@mixin phablet {

    @media screen and (min-width: $phablet-width) {
        @content;
    }

}

@mixin tablet {

    @media screen and (min-width: $tablet-width) {
        @content;
    }

}

@mixin desktop {

    @media screen and (min-width: $desktop-width) {
        @content;
    }

}

@mixin desktop-medium {

    @media screen and (min-width: $desktop-medium-width) {
        @content;
    }

}

@mixin desktop-large {

    @media screen and (min-width: $desktop-large-width) {
        @content;
    }

}

@mixin desktop-xlarge {

    @media screen and (min-width: $desktop-xlarge-width) {
        @content;
    }

}

// For custom mobile-first media-query breakpoints 
@mixin breakpoint($min-width) {

    @media screen and (min-width: $min-width) {
        @content;
    }

}

/**
 *	Font-size: create a fully formed type style (sizing and vertical rhythm) by passing in a
 * 	single value, e.g.:
 *
 * 	.foo {
 * 	    @include font-size(12px);
 * 	}
 *
 * 	This will generate a rem-based font-size with its pixel fallback, as well as
 * 	a unitless line-height which will place the element on your baseline, e.g.:
 *
 * 	.foo {
 * 	    font-size: 12px;
 * 	    font-size: 0.75rem;
 * 	    line-height: 2;
 * 	}
 *
 * 	If you do not want to generate a line-height automatically, you simply pass
 * 	in your own as a second paramater, e.g.:
 *
 * 	.foo {
 * 	    @include font-size(12px, 1.5);
 * 	}
 *
 * 	This will yield:
 *
 * 	.foo {
 * 	    font-size: 12px;
 * 	    font-size: 0.75rem;
 * 	    line-height: 1.5;
 * 	}
 *
 * 	This parameter can be any integer, ‘inherit’, or ‘normal’.
 *
 * 	If you don’t want a line-height at all, pass in a second paramater of ‘none’
 * 	or ‘false’, e.g.:
 *
 * 	.foo {
 * 	    @include font-size(12px, none);
 * 	}
 *
 * 	This will yield:
 *
 * 	.foo {
 * 	    font-size: 12px;
 * 	    font-size: 0.75rem;
 * 	}
 *
 */
@mixin font-size($font-size, $line-height: "auto", $important: false) {

    @if ($important == "important") {
        $important: unquote("!important");
    } @else {
        $important: null;
    }

    font-size: $font-size $important;
    font-size: ($font-size / $base-font-size) * 1rem $important;

    @if $line-height == "auto" {
        line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    }

    @else {

        @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
            line-height: $line-height $important;
        }

        @elseif ($line-height != none and $line-height != false) {
            @warn "‘#{$line-height}’ is not a valid value for `line-height`.";
        }

    }

}

/**
 * Create fluid type with min and max sizes.
 * Modified version from: https://blog.codepen.io/2016/10/31/fluid-type-blogs/
 *
 * $min_width: 320px;
 * $max_width: 1200px;
 * $min_font: 16px;
 * $max_font: 24px;
 *
 * .usage {
 *   @include fluid-type($min_width, $max_width, $min_font, $max_font);
 * }  
 */
@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size, $important: false) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if ($important == "important") {
    $important: unquote("!important");
  } @else {
    $important: null;
  }

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {

      font-size: $min-font-size $important;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})) $important;
      }

      @media screen and (min-width: $max-vw) {
        font-size: rem-calc($max-font-size) $important;
      }
    }
  }
}

/**
 * 	Mixin to drop micro clearfix into a selector.
 *
 * 	.usage {
 * 	  @include clearfix;
 * 	}
 */
@mixin clearfix {

    &:before,
    &:after {
        content: "";
        display: table;
    }

    &:after {
        clear:both;
    }

}

/**
 *   Mixin to create simple grid system
 *   (widths without gutters)
 *
 *   Can be used in conjuction with o-layout
 *   or independantly by passing 'true' for the value of $float
 *   Using in conjuction with o-layout is preferred.
 *
 *   .simple-usage {
 *     @include column-span(4, true);
 *   }
 *
 *   This will yield:
 *
 *   .simple-usage {
 *       float: left;
 *       width: 33.33%
 *   }
 *
 *   The below usage example uses the grid
 *   system in conjunction with o-layout:
 *
 *   <div class="o-layout">
 *       <div class="o-layout__item foo"></div>
 *       <div class="o-layout__item foo"></div>
 *   </div>
 *
 *   .foo {
 *        @include column-span(6);
 *   }
 *
 *   This will yield:
 *
 *   .o-layout {
 *       list-style: none;
 *       margin:  0;
 *       margin-left: -$layout-gutter;
 *       padding: 0;
 *   }
 *
 *   .o-layout__item {
 *       display: inline-block;
 *       padding-left: $layout-gutter;
 *       vertical-align: top;
 *   }
 *
 *   .foo {
 *       width: 50%;
 *   }
 */
@mixin column-span($column-span, $column-number: 12, $float: false) {

    @if (type-of($column-number) != number) {
        @warn "`column number` should be an integer, instead it was: ‘#{$column-number}’.";
    }
    $grid-width: 100%;
    $column-width: ($grid-width / $column-number * $column-span);

    @if ($float == true or $float == "true") {
        float: left;
    }
    width: $column-width;

}

/**
 *  Mixin to stretch an element across its parent.
 *
 *  .parent {
 *      position: relative;
 *  }
 *
 *  .cover {
 *      @include cover;
 *  }
 */
@mixin cover {
    bottom: 0;
    height: 100%;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    width: 100%;
}

/**
 * 	Mixin to center an element using absolute positioning
 *
 *	//	horizontal and vertical center
 * 	.simple-usage {
 * 	  @include absolute-center();
 * 	}
 *
 *	//	horizontal center
 * 	.detailed-usage {
 * 	  @include absolute-center(true, false);
 * 	}
 *
 *	//	vertical center
 * 	.detailed-usage {
 * 	  @include absolute-center(false, true);
 * 	}
 */
@mixin absolute-center($horizontal: true, $vertical: true) {
	position: absolute;
	@if ($horizontal and $vertical) {
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	} @else if ($horizontal) {
		left: 50%;
		transform: translate(-50%, 0);
	} @else if ($vertical) {
		top: 50%;
		transform: translate(0, -50%);
	}
}

/**
 *   Function to convert pixel values to rem
 *
 *   .usage {
 *       padding-right: rem-calc(40px);
 *   }
 */
@function rem-calc($size) {
    $remSize: $size / $base-font-size;
    @return #{$remSize}rem;
}


@mixin circle-button {
    background-color: $base-text-colour;
    border-radius: 50%;
    display: inline-block;
    height: 23px;
    width: 23px;
    position: relative;
    pointer-events: none;
    margin-left: 30px;

    &:before,
    &:after {
        background-color: $colour-white;
        content: '';
        display: inline-block;
        height: 2px;
        left: 50%;
        position: absolute;
        top: calc(50% - 1px);
        transform: translateX(-50%);
        width: 10px;
    }

    &:after {
        height: 10px;
        transform: translate(-50%, -45%) scaleY(1);
        transition: transform 0.4s cubic-bezier(0.55, 0, 0, 0.85);
        width: 2px;
    }
}

/**
 * 1. Ensure any childNodes of <h> tags get 'italic' style over the
 *    parentNode's 'normal'
 */
@mixin font-italic {
    font: {
        family: $font-fallback-serif;
        style: italic; /* [1] */
        weight: 400;
    }
}